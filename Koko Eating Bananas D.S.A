class Solution {
public:
    // Helper function to calculate if Koko can eat all bananas at the given speed `mid` within `hrs`
    int fu(int mid, vector<int>& piles, int hrs) {
        int i = 0;          // Index to iterate through the `piles`
        int hours = 0;      // Total hours needed to finish the bananas at speed `mid`
        
        // Loop through all banana piles
        while (i < piles.size()) {
            // Calculate the hours required for the current pile
            // `(piles[i] + mid - 1) / mid` ensures ceiling division to account for partial hours
            hours = hours + (piles[i] + mid - 1) / mid;

            // If the required hours exceed the available hours, return 0 (not possible)
            if (hours > hrs)
                return 0;

            i++; // Move to the next pile
        }
        
        // If we finish within the given hours, return 1 (possible)
        return 1;
    }

    // Main function to find the minimum eating speed
    int minEatingSpeed(vector<int>& piles, int h) {
        int s = 1;  // Minimum possible eating speed (1 banana per hour)
        int e = *max_element(piles.begin(), piles.end()); // Maximum eating speed is the size of the largest pile
        
        // Binary search to find the minimum speed
        while (s <= e) {
            int mid = (s + e) / 2; // Middle point of the current search range
            
            // Check if eating speed `mid` is feasible using the helper function
            int sqr = fu(mid, piles, h);
            
            if (sqr == 0) // If not feasible, increase the speed (move to the right half)
                s = mid + 1;
            else // If feasible, try to find a smaller speed (move to the left half)
                e = mid - 1;
        }

        // `s` now holds the minimum speed at which Koko can eat all bananas within `h` hours
        return s;
    }
};
